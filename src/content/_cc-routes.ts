import { cwd } from "node:process";
import type {
  IntermediateRouteUnitSupplier,
  IntermediateRouteUnit,
  DiscoveredRouteUnit,
} from "../governance/information-model/route";

// IMPORTANT NOTE:
// ==============
// The files ./(content-collection)/_routes.auto.json are generated by
// src/content/_cc-routes-sync.deno.ts and if content is out of sync you will
// need to `npm run npm run sync-cc-routes`

import blogPrime from "./blog-prime/_routes.auto.json";
export type BlogPrimeIRUsKey = keyof typeof blogPrime;

import devSecOpsInfra from "./dev-sec-ops-infrastructure/_routes.auto.json";
export type DevSecOpsInfraIRUsKey = keyof typeof devSecOpsInfra;

import enterArch from "./enterprise-architecture/_routes.auto.json";
export type EnterArchIRUsKey = keyof typeof enterArch;

import enterArchExplore from "./enterprise-architecture-explore/_routes.auto.json";
export type EnterArchExploreIRUsKey = keyof typeof enterArchExplore;

import qualitySystem from "./quality-system/_routes.auto.json";
export type QualitySystemIRUsKey = keyof typeof blogPrime;

import proseFlexible from "./prose-flexible/_routes.auto.json";
export type ProseFlexIRUsKey = keyof typeof proseFlexible;

import initiatives from "./initiatives/_routes.auto.json";
export type InitiativesIRUsKey = keyof typeof initiatives;

export const druCatalogSources = {
  "blog-prime": blogPrime,
  "dev-sec-ops-infrastructure": devSecOpsInfra,
  "enterprise-architecture": enterArch,
  "enterprise-architecture-explore": enterArchExplore,
  "quality-system": qualitySystem,
  "prose-flexible": proseFlexible,
  initiatives: initiatives,
};
export type DiruSource = keyof typeof druCatalogSources;

export function discoveredIruSource(
  keySupplied: string,
  targetIruSource?: DiruSource,
): {
  readonly druCatalogEntryKey: string;
  readonly druCatalogSource: Record<string, DiscoveredRouteUnit> | undefined;
} {
  let druCatalogEntryKey = keySupplied;
  let druCatalogSource: Record<string, DiscoveredRouteUnit> | undefined;

  if (targetIruSource) {
    druCatalogSource = druCatalogSources[targetIruSource];
  } else {
    // special case when _route.ts is in root of content collection; the
    // key will just be the name of the content collection
    if (druCatalogEntryKey in druCatalogSources) {
      druCatalogSource = druCatalogSources[druCatalogEntryKey as DiruSource];
      druCatalogEntryKey = ".";
    } else {
      const firstTokenIndex = keySupplied.indexOf("/");
      druCatalogSource =
        druCatalogSources[keySupplied.slice(0, firstTokenIndex) as DiruSource];
      druCatalogEntryKey = keySupplied.slice(firstTokenIndex + 1);
      if (!druCatalogSource && druCatalogEntryKey in druCatalogSources) {
        // special case when _route.ts is in root of content collection
        druCatalogSource = druCatalogSources[druCatalogEntryKey as DiruSource];
        druCatalogEntryKey = ".";
      }
    }
  }

  return { druCatalogEntryKey, druCatalogSource };
}

export async function discoveredIRU(
  keySupplied: string,
  targetIruSource?: DiruSource,
): Promise<{
  readonly druCatalogEntryKey: string;
  readonly druCatalogSource: Record<string, DiscoveredRouteUnit> | undefined;
  readonly druCatalogEntry?: DiscoveredRouteUnit | undefined;
  readonly iru?: IntermediateRouteUnit | undefined;
}> {
  const diruSource = discoveredIruSource(keySupplied, targetIruSource);
  const druCatalogEntry = diruSource.druCatalogSource
    ? diruSource.druCatalogSource[diruSource.druCatalogEntryKey]
    : undefined;

  // diruCatalogEntry is not "executable" (no functions available) since it's
  // from JSON but the actual iru will be dynamically executed function result
  if (druCatalogEntry) {
    const contentPathAbs = `${cwd()}/src/content`;
    // module is the _route.ts in the discovered intermediate route unit dir and must be absolute path
    const module = await import(
      /* @vite-ignore */ `${contentPathAbs}/${druCatalogEntry.originFsPath}`
    );
    // each _route.ts module should have export function intermediateRouteUnit(): govn.IntermediateRouteUnit ...
    const intermediateRouteUnitFn = module["intermediateRouteUnit"] as
      | IntermediateRouteUnitSupplier
      | undefined;
    if (intermediateRouteUnitFn) {
      return {
        ...diruSource,
        druCatalogEntry: druCatalogEntry,
        iru: intermediateRouteUnitFn(),
      };
    }
  }

  return { ...diruSource, druCatalogEntry };
}
